(PyPE 1.6.4)
(NOTES REGARDING UNICODE SUPPORT) I have little (or really no) experience when
it comes to unicode support in Python.  I had mistakenly assumed that creating
a binary using the unicode-supporting wxPython would have been sufficient to
support unicode out of the box.  Unfortunately, this is not the case.  There
is encoding and decoding that must be done on either end, and one must know
which encoding to use in order to properly support unicode.  As that adds
additional complication to PyPE, and to the handling of ALL files, regardless
of what extended text is supported, I'll not be producing a binary with
partial unicode support.  Those that have tried saving unicode files in 1.6.3
will notice the problem during saving, and the fact that it doesn't work.
While I am not ruling out the possibility of PyPE fully supporting unicode in
the future, I don't believe I will be implementing it.  My apologies.

(NOTES REGARDING DOCUMENTATION) I know that the documentation is out of date.
I will update it when I get around to it.  I prefer to make PyPE better than
to spend my time updating the documentation.

(NOTES REGARDING VERSION REQUIREMENTS) I have changed the wxPython version
required.  This is because the wxSTC has a known bug in version 2.4.1.2 that
causes PyPE to exit without warning, possibly causing data loss.  This is bad.
The wxSTC that is included with wxPython version 2.4.2.4 doesn't have this
fatal bug.

#The below bugs/suggestions were reported by francescoa in the PyPE forums at
#Sourceforge or in email.  I have added the features or fixed the bugs.
(fixed) a bug involving pasting to code snippets.
(fixed) a bug involving changing code snippet focus and tab focus (they would
do so simultaneously when changing code snippet focus).
(fixed) running the currently open script in windows when the path to the file
contains spaces.
(removed) an import that was not used.
(added) when using the find/replace dialog, the word that is currently under
the cursor will be inserted into the find/replace dialog find text.
(fixed) the find dialog will now find up or down, depending on the radio item
in the dialog.  Previously it would ignore the 'up' or 'down' choice.
(added) bookmarks within a file, for quickly and easily bookmarking certain
locations for later perusal.

#end of bugs/suggestions reported by francescoa

(replaced) Added file over-write confirmation dialog.
(removed) checkbox for 'readonly' files.  There seems to be no way to get the
status of that 'open file in read-only mode'.  Which is completely retarded.
(cleaned) replaced the indent/dedent code with a call to the STC command for
indent/dedent.
(replaced) the aforementioned calls to the STC indent/dedent with my previous
code.  I prefer the behavior of my code to that of the STC indent/dedent code.
(made better) the dirty flag on the each open document is now consistent with
the last time the user saved thanks to EVT_KEY_UP, STC.SetSavePoint(), and
STC.GetModify().  It is now more accurate and does not rely on the numerous
hacks I did before to make it work.
(fixed) a bug that occurred on windows machines when PyPE would try to delete
the temporary parsing output when it was still opened by the parser.
(added) a statusbar field that displays the current line and column.  It is
only updated when a key is released (EVT_STC_POSCHANGED doesn't seem to work).
To update the display if it is not being updated, tap the CTRL key.
(added) events in the statusbar now have a timestamp when they occur.
(moved) code for wrapping lines into configuration.py
(added) ability to open all the documents previously open in your last PyPE
session if you quit PyPE with those documents saved and have their tabs open.
You can force this behavior on PyPE startup with the FIRST argument on the
command line being '--last'.
(changed) removed the various 'shortcuts' for generating the menus that ended
up taking more lines and being more difficult to edit.  While not reducing the
number of lines (significantly), it does increase readability of the menu
code.
(changed) realized that the ID definitions are only required when you need to
compare event id numbers.  When you don't care, and just want an event to be
posted, then event declarations are functionally useless.  Cleaned up a lot of
global definitions.  Will likely have to re-insert such definitions for the
likely future feature addition of user-definable key-bindings.
(fixed, changed, added) more than a handful of other things that I didn't
remember writing down in this changelog.


(PyPE 1.6.3)
(fixed) a visual bug that existed from the beginning.  When saving, it used to
say 'open' on the button...now it says 'save'.  No big deal.  But still neat.
(fixed) a problem with paths on windows systems with recursive environment
variables (like HOME=%USERPROFILE%).
(known bug) there exists a bug in automatic word wrapping.  This is within
wxSTC, not PyPE.  For an example of this bug in action, I've provided some
code in the wxWindows bug page here:
http://sourceforge.net/tracker/index.php?func=detail&aid=816227&group_id=9863&atid=109863
(slight refactor) I didn't like the repeated 'parent' references for different
items when it wasn't so much a 'parent' as much as it was referring to the
actual topmost frame of the application (especially when such references
called functions that only existed in the topmost frame).  I've changed such
references from 'parent' to 'root', where it makes sense, as well as creating
some other names in other classes where appropriate.
(fixed) a bug involving creating a dialog describing an exception when an
exception occurred.
(fixed) a few tiny bugs in find/replace (one would only notice the non-fatal
bugs if one switched tabs during a find/replace dialog).
(fixed) aforementioned bug from the 1.6 changelog with recently open files.  I
completely forgot about it until I was reading the older changelogs today to
remember how far PyPE has come.


(PyPE 1.6.2)
(fixed) apparently the textwrap module in Python 2.3 doesn't work the way I
wanted it to.  As a result, text wrapping with Python 2.3 and the Windows
binary didn't work in PyPE 1.6.1.  I've removed the code responsible, and it
should work identically between Python 2.2 and Python 2.3.


(PyPE 1.6.1)
(fixed) small overflow error when creating unique temporary file for parsing.
Unnoticed due to testing with python 2.3 which automatically casts overflowed
ints to longs.
(added) modifying word wrapping support.  Python 2.3 and Windows binary users
of PyPE will use the textwrap module that is included with Python 2.3,
everyone else gets the featureless 'wrap on newline or spaces' line wrapper.
The included gpl.txt has now been wrapped using this feature.  Check the edit
menu.
(added) non-modifying word wrapping support.  Went looking through the STC
documentation and found support for it.  Check the edit menu.
(added) some small pieces that will allow future state information to be
displayed in a field within the statusbar.


(PyPE 1.6)
(please note) I am going on vacation from September 3 to September 14.  Any
bug reports will be silently ignored until at least the 15th.  If you have
problems using 1.6, try using 1.5.1 until I get back to you.

(made better) user profile path discovery.  Thanks Erik Lechak.
(fixed) if the user profile cannot be saved, you will get a dialog informing
you of this.  Previously, this was not the case, it would be silently ignored.
(fixed) there was a bug in the recently open documents menu that would cause
certain documents to be placed in the menu, and others not to be.  From now
on, any document opened will be placed in the menu.  The document will have
the file name and path normalized, as per os.path.normcase and
os.path.normpath.  This will result in duplicate file entries until the menu
gets cleared out of old entries for Windows users, as the menu thinks there is
a difference between c:\doc.txt and C:\Doc.TXT on Windows.  You can speed this
up by dragging and dropping 9 random text files onto PyPE.
(fixed) a foolish bug that stopped me from using map anywhere in PyPE, I had
assigned map to be a mapping for the find/replace dialog stuff.
(changed) Code snippets are now optionally turned off in the view menu.  In
turning off code snippets, then closing down and starting back up PyPE, you
will no longer have a code snippet bar on the left side, nor will the hot keys
work.  For those people who use code snippets, I'll do my best to not remove
the functionality, and keep it an option, but may arbitrarily remove it in the
2.x series, if development proceeds that far.
(added) goto line as a menu command and hotkey.  I've been wanting it for a
while, and it was requested by another user.  So I added it.
(added) the option to add a search path for modules.  This is a setting that
will be saved, and is of primary use for those using the windows binary on a
system with Python installed.  To tell the truth, I've been using the binary
for a while; it starts up faster.  This addition makes the binary as powerful
as the source version.  To remove paths from the module search, one must delve
into the history.txt file.  I really should write an abstracted class to
handle pathmarks, shell commands and module paths...maybe in a later version.
(fixed) inserted a minor change that fixed the autoindent for lines that
contain slices.
(changed) hitting F5 will now cause the slow parser to do its magic, and if it
fails (due to a syntax error), the fast parser will kick in.  If you always
want the fast parser to work, just leave a syntax error in your source until
just before you run it.  When opening multiple files, 
(cleaned up) some imports, variable declarations, etc.
(tried to change but failed) I had attempted to make all parsing occur in the
background with an additional thread so that the GUI wouldn't seize up.
Unfortunately, there seems to be a bug with either Python garbage collection,
wxStyledTextCtrl, or STCStyleEditor.py.  How do I know?  Because doing any
operation that causes garbage to be generated (for the garbage collector to
collect) while updating the wxStyledTextCtrl component with the STCStyleEditor
module causes a garbage collection error in both Python 2.2 and Python 2.3.
Certainly I can spend a few weeks testing and inserting locks around portions
that could cause problems, but I will not.  On the upside, I'm really good at
creating new events, event handlers, and other such things, so if there ever
is a need for background processing (IE the garbage collection error gets
fixed), It'll be a 5-minute job.
(finally succeeded) the trick to getting background parsing lay within the use
of os.popen4.  Keeping the parsing out of process fixed the problem I was
having, and I could even use some threads to wait for the child.stdout.read()
to complete.  Works fabulously.  It takes about 110% as long to do it as an
external process (through the use of a=repr(obj), eval(a) and pipes), but that
is OK as it no longer delays the GUI.  Ah HAH!  Spelunkers into the code will
notice that I'm actually calling the editor itself...with an argument of
'--parse', and I've also done away with runscript.py, by calling the editor
itself using '--exec' as an argument.
(changed parsing) the current parsing method does not use pipes or threads,
and also limits itself to parsing one file at any one time (I've dropped 20
files onto PyPE with the threading approach, and PyPE would not respond for
a while).  Now PyPE is always responsive (as long as your processor has
available cycles).
(fixed) it seems as though runscript.py was never included in the windows-only
version of PyPE.   No worries, it is now a part of the editor, so should just
work.
(fixed) there seemed to be a long-standing bug in calling PyPE with relative
command line arguments for files to open.  This has been fixed.  There is a
minor bug relating to the recently open files menu, but that'll be fixed when
I get back from vacation.
(fixed) my constant misspellings of hierarchy, I had been incorrectly spelling
it as heirarchy.  Misspelling pointed out by my wife.


(PyPE 1.5.1)
(fixed) a little bug with autoindent after [else, try, except, finally]
statements.  I forgot to add them into the autoindent stuff.
(fixed) another little bug with autoindent.  It wouldn't autoindent after a
[if, else, etc.] if the cursor was after the last character in the document.
(fixed) another little problem with autoindent.  Had to do with certain kinds
of nested declarations.  Damn, autoindent is almost more trouble than it is
worth.


(PyPE 1.5)
(fixed) a little problem when finding line endings in some ambiguous files.
Ambiguous files being files lacking any sort of line endings.
(fixed) autocompletion popping up during typing in strings and comments.  Now
it doesn't.  It would before.  A single line change.
(removed) keywords from the autocomplete stuff.  Why?  Because having to hit
return twice for the keywords [raise, return, pass] was annoying as hell.
(removed) duplicate "import keyword" statement in parsers.slow_parser
(fixed) autoindentation after a definition works better.  Not quite as good as
idle yet, but getting there.
(fixed) remember when you would hit 'F5' with the browsable source tree
expanded and it would remove all your expansions?  This was due to clearing
and reconstructing the tree.  Due to a user asking, "could you stop this",
I've altered PyPE to remove this bulk clear and reconstruction.  It now
updates the data as necessary, only removing or adding nodes as needed.  It is
nifty.
(fixed) with the introduction of the 'remember the last path that was open'
when starting up PyPE again functionality, it introduced a bug.  If one
attempted to use a pathmark or use the recently opened documents menu, it
wouldn't clear the last open path.  This has now been remedied.  Any time you
open a document using the recent menu, or use a pathmark, it will now change
it properly (instead of forcing you to hit 'cancel' in the open dialog, then
try to open again).  In other words, it works like you expect it to now.
(stymied) Autoindent like idle does is going to be hard.  This is because idle
actually does a large amount of parsing.  I have a feeling this is why it is
sometimes sluggish.  I could be wrong.
(good enough) I think the current autoindent code works just fine for most
things.  It certainly isn't as complete as idle, but I think it would be out
of line for the entire document to be parsed at every newline insertion.
Unless the need bites me, I'm not going to insert dedent code for [raise,
return, pass]
(fixed) Dedenting on a single line will now keep your cursor in the original
relative position to the remaining of the line.  It will also remove partial
indentations before removing a full indentation.


(PyPE 1.4.2)
(fixed) some stupid bugs with loading and saving of history/pathmarks/shell
commands into history.txt.  Sorry about that.  The 1.4 series of PyPE has
proven itself to be the buggiest series ever.  *grumble*


(PyPE 1.4.1)
(fixed) a problem with pathmarks introduced by the 'remember the last path you
were in when PyPE last closed' addition.  Yes, this fix gets it's own version.


(PyPE 1.4)
(added) in commenting/uncommenting feature thanks to Mark Tipton's adaptation
of some codeEditor code.
(added) in a few things to give the parsers a couple more options.  The slow
parser is still slow.  It may be replaced by one that uses the compiler
module.
(change) there is a new 'slow' parser in included with PyPE parsers module.
Instead of using the standard parser python module, it uses the compiler
module.  This is better for a few reasons; it is faster, all the information
that is needed for the browsable source tree, autocompletion, and even
docstrings (for pulling out tooltips) are available.  Speaking of which...
(submissions by Mark Tipton)
cmt-001 - 08/06/2003: Added code to configuration.py to create a configuration
directory to store user-related configuration information.  Added code to
pype.py to store an opened file history that is displayed at the bottom of the
file menu and that saves the directory of the last file opened and starts
there the next time you start pype.
cmt-002 - 08/06/2003: I couldn't get the 'runScript' function to work on
Linux. It seemed to be related to files and directories with spaces in the
name. The function was drastically modified (actually completely replaced)
using code from PythonCard's codeEditor and seems to work on both Linux and
Windows XP.
(changed) now pathmarks, shell commands (as well as the new history.txt) are
stored in <HOME>/.pype, where HOME is an environment variable set to be the
path of your home directory, or the directory in which PyPE is currently
running if the HOME environment variable is not set.
(cleanup) After discovering that wxMenu will handle the majority of one's
accelerator hotkey needs, I've cleaned up a bit of the code, removing some
of what was remining in MainWindow.OnKeyPressed.  Here's hoping that I don't
forget to test some hotkey by the time 1.4 is released.
(fixed) a few minor misspellings in some comments.
(added) some help stuff.
(added) a native win32 build of PyPE due to request, thanks to py2exe.  I'll
try to remember to build a win32 native version every time.  If someone out
there in linuxland wants to build a linux native version using Gordon
McMillan's Installer (available at http://www.mcmillan-inc.com/install1.html),
I would happily post it.


(PyPE 1.3.1)
(added) a version checker to PyPE.  If you are running a version of wxPython
before 2.4.1.2, and PyPE worked before I added this, please email me with the
version string of wxPython you were using, which can be found by running this
(without the single quotes) python -c "import wx;print wx.VERSION_STRING"
To email me, head to http://www.ics.uci.edu/~jcarlson/contact.html


(PyPE 1.3)
(confirmed) As believed, PyPE 1.2 and later work with Python 2.3.  No worries
about upgrading, but no requirements either.  I'll be developing with 2.2, but
will test all releases from now on with 2.3 as well.  I don't forsee any
issues involved with the transition to Python 2.3 in the future.  In the next
6 months, if I happen to use features added in Python 2.3 (like enumerate), I
will make sure to include a work-alike for those of us who migrate a few
months after a Python release.
(changed) now when you open a .txt file the text styling will be used.
(changed) the text style now uses a monospaced font (because non-monospaced
text in an editor like PyPE is just plain ugly).
(fixed) a little bug in MainWindow.OnDrop, where a failed file open should
open up a dialog explaining why the open failed, but would instead cause
another exception.  Ick.
(added) a very rudimentary hierarchical python parser.  It only pays attention
to leading spaces in function and class definitions.  That is why I call it
rudimentary.  All bug reports regarding the hierarchical python parser will be
ignored.  Patches for making the parser better will be merged, likely used,
and properly attributed.
(added) "autocompletion" dropdown for keyword/function/method completion.
Accessable via CTRL-<space>.
(added) a browsable source tree per open document.  Check the view menu.  It
uses an iterative method rather than a recursive method which could go beyond
the interpreter's recursion limit for very deep source files.
(left in) the stub for adding tooltips.  I dig tooltips, but I don't really
want to add the code for sucking tooltips out of the first line of a method or
module's docstring.  Maybe 1.4, maybe.
(fixed) a bug with dropping files to open onto an already open document.
(fixed) a bug where cut/paste/undo/redo by keyboard wouldn't mark the document
as being 'dirty' with the little asterisk next to the file name.  Now whenever
one uses cut/paste/undo/redo causes the document to become dirty, even when
nothing actually changes.  I think this is better.
(discovered) window.SetFocus(), a nice little thing that gives keyboard focus
to objects derived from wxWindow (most everything is), thanks to oZt that
popped into the #python channel who was looking for such a thing, that made me
curious as well.  Now things like double-clicking on code-snippets and on
the browsable source tree will now give source editor focus.  Sweet.
(fixed) some bugs with portions of the window not redrawing.
(added) two parsers for the browsable source tree.  A fast one, and an
accurate one.  The fast one can parse PyPE 1.3 in .08 seconds.  The accurate
one can parse PyPE 1.3 in 4 seconds.  These times are on my PII-400.  By
default, the fast one will be in use, this is for two reasons; the first being
speed (no one wants a slow source browser refresh), the second being that the
slow parser (which uses the parser module) dies during the creation of the
syntax tree if there are any syntax errors in your source, making it somewhat
useless during development.  If anyone can offer anything better than either
for what they are doing, I would be very happy to give you credit for your
work.  Any bug reports on the fast parser being inaccurate will be ignored.
Any bug reports on the slow parser being slow or not working on non-working
code will be ignored.  If you'd like to test the parsers, give this a try:
'./parsers.py pype.py' to find out how fast either would take to parse PyPE on
your system.  One thing to note is that the slow parser, because it uses the
parser module, has a few problems with line numbers (many lines that are in
triple quoted strings are considered one line, and comment lines are discarded
completely), so the slow parser uses the fast parser to get line numbers.
Kinda funny really.  The accurate one (in terms of hierarchy) is completely
off in terms of line numbers.  HAH!
(fixed) a little bug regarding comment insertion.  If one would hit cancel, it
would have caused an exception...that was ignored.
(confirmed) still works with Python 2.2 and 2.3.


(PyPE 1.2)
(changed) pathmarks are always saved on program exit.
(added) command line argument support with the use of os.path.abspath for all
the relational and absolute path references for all systems.  I like when what
I need has already been implemented.  Multiple file arguments also just work.
(fixed) a bug with path normalization and whether a file was open already.
(forgot) to remove some of the drag and drop stuff in the previous version...
(added) drag and drop file support.  Enabled by default, but can be disabled
in the text-editing portion for text dnd support.  Why don't I just write a
control for dnd text and files?  Because I REALLY don't want to, and don't
know if it can even be done (I have a feeling it can be, just not with
wxFileDropTarget and wxTextDropTarget).
(discovered) os.linesep, a great little declaration that has replaced a few if
then elif then else statements in configuration.py.  I knew there had to be
something like that in the os module.
(added) an 'open module' functionality similar to what I remember of older
IDLE, though this one searches in an identical fashion to the way an 'import'
statement would in later versions of Python, that is, it includes hierarchical
module importing, as well as the current path in the search for a module.
(cleaned) some duplicated code out.  Opening a file, a module, or dropping a
file onto PyPE causes the same code to run.  Isn't that nice?  I think so.
Code duplication leads to bugs.  Bugs are bad.
(fixed) save as dialog would offer multiple wildcards, made it give *.*
instead so that I wouldn't have to write automatic file extension code for
right now.  This may actually be added by the time this minor release is
released.
(fixed) if you loaded a document and undo once, it will clear the document.  I
kept forgetting to get rid of this, but thanks to the project's first official
bug report on sourceforge, I had the reason to add the line required to
pype.PythonSTC.SetText - thanks anonymous bug poster.
(fixed) that REALLY ugly code for changing style update information.  It used
to create an entirely new page, load the text, copy all the state information
(except for undo), then replace the current page.  It has now been replaced by
the same style change that is done upon loading, and it just works.  I like it
when that happens.  No messy copying, wxStyledTextCtrl just works.
(made pretty) the menu item hotkeys used to be vertically aligned as best I
could by hand...then I noticed how they do menus in the wxPython demo; tabs.
Repaired all the menu items with tabs, and now they are consistent, if not
pretty (insert maniacal laugh).
(made better) you know how pathmarks used to always have that menu that was
filled up, even when no pathmarks were being used?  Not anymore.  They now
change as your pathmarks are changing.  How's that for spiffy?  Idea thanks to
the wxPython demo app.
(fixed) previously when one would go step by step in the find/replace dialog,
it wouldn't select the next found object when a replacement had been made.
This has been fixed.
(fixed) small bug that caused an exception after finding and replacing all, it
wouldn't kill PyPE, but it was a foolish mistake.
(added) code snippet support.  See the FAQ portion of the readme for how to
use it.  They are available as menu commands in the lower portion of the view
menu.
(fixed) when adding or deleting pathmarks, when the window pops up again, it
used to select the first entry every time, it now selects the previously
selected entry.  This should stop you from losing your first pathmark if you
accidentally hit 'OK' on a deletion.
(added) shell command execution support.  Uses os.spawnv in windows,
os.spawnvp everywhere else that supports it.  The windows version is not able
to scan your paths to find an executable (hence why it is 'v' and not 'vp').
Whether this is a limitation of something in windows, python or otherwise, I
have no idea.  Just don't blame me.  Dynamic menus abound.
(cleaned) up some exception dialog stuff.  Removed some duplicated code.
(reorganized) the menus somewhat.  Items have been relocated to menus that are
much more intuitive.
(changed) along with pathmarks; code snippets and shell commands are saved at
program exit.  All three are stored in pathmarks.py


(PyPE 1.1)
(cleaned) I did some house cleaning and started using wxNewId to generate
event ids rather than doing them manually.  This required a few tweaks to the
menu generation code, but it cleaned up nicely.  It is also quite consistent
now (wheee, consistency).
(cleaned) I also added a few more functions to deal with previously opened
files easier.
(added) wxSplitterWindow control to hold some extra goodies on the left of the
window.  Just wait for what I have in store for you.  As the controls that I
have added do not support keypress events (other than the menu alt-commands),
hot-keys are only useful when a document is open, or when you haven't touched
the splitter bar or other controls after documents have been closed.
(confirmed) The line ending corruption fix for 1.0.1 seem to be working great.
(fixed) Discovered and removed a bug when inserting a comment would mess up
line endings in the surrounding lines, making it look like there was an extra
blank line inserted on windows systems.  Replaced a '+1' with
'+len(win.format)'.  I like easy fixes.
(tweaked) Line ending detection so that it does something a bit more
intelligent.  It works better on strange files now.
(fixed) undoing and redoing previously wouldn't mark the document as being
'dirty', this is fixed and merged with the code for cut and paste making the
document dirty through the use of a dictionary.  This brings up the question
as to whether or not ALL keypress events should just be a dictionary lookup
rather than a sequence of if, elif, else statements.  They probably should.
Maybe in the next minor version.
(removed) the aforementioned splitter window for now.
(cleaned) up the handling of many of the hotkeys that are used via a
ctrl-<key> combinations.  Basically all but two of the ctrl hotkeys are in a
dictionary for O(1) lookups.  I like that.
(reorganized) some of the menu command locations.
(added) pathmark support.  Viewing pathmarks, editing pathmarks, deleting
pathmarks and saving pathmarks to the configuration file.  MMM, pathmarks.
(added) more status bar text updates, like closing, opening, creating new, and
other such things.  I like updates.
(fixed) undoing and redoing of changing tabs is now done by the entire block
that was tabbed/untabbed, not by the individual line as before.
(discovered) how to use the shift and control clicking of the scope-based
collapseable blocks.  Updated the help to explain how they work.
(contemplated) adding drag and drop support.  After spending some time mucking
around it, I have decided it can wait until the next minor release.
(contemplated) adding code snippet support.  It's where you have a listing of
named code snippets that double clicking will cause to replace the current
selection (or insert at the current cursor position).  I'm trying to decide
how/where to place the code snippets.  I've come to enjoy having a full screen
for editing code, and to lose some of it to code snippets, almost seems
strange.  It'll probably be in the next point release with file drag and drop
support.


(PyPE 1.0.1)
(fixed) Thanks to a message from Lunar Linux guru Jeff Hodges, I was turned on
to Pychecker.sourceforge.net and have discovered two previously unknown
unpassed arguments to functions.  While pychecker is useful, it returns a lot
of variable not used errors.  I'll use it before every .n version release
after I do a couple more feature additions.
(fixed) Also thanks to Jeff Hodges, I discovered a bug in 1.0 that will tend
to produce line endings that are \r\r\n...which is wrong, for ANY system.  It
is now fixed.  It had to do with reading and writing files in ascii mode, not
in binary mode.  Apparently it makes a difference in terms of line endings.
Who knew?


(PyPE 1.0)
Initial version
